package base85

import (
	"reflect"
	"testing"
)

func TestEncode(t *testing.T) {
	for _, tc := range []struct {
		name string
		str  []byte
		want []byte
	}{
		{"len(src)%4 = 3", []byte{77, 97, 110, 121, 32, 104, 97, 110, 100, 115, 32, 109, 97, 107, 101, 32, 108, 105, 103, 104, 116, 32, 119, 111, 114, 107, 46},
			[]byte{57, 106, 113, 112, 98, 43, 68, 62, 50, 36, 65, 57, 47, 108, 49, 64, 59, 66, 69, 115, 67, 104, 91, 78, 113, 70, 60, 71, 100, 71, 69, 98, 100, 57}},
		{"len(src)%4 = 2", []byte{67, 104, 97, 110, 103, 101, 32, 116, 104, 101, 32, 119, 111, 114, 108, 100, 32, 98, 121, 32, 98, 101, 105, 110, 103, 32, 121, 111, 117, 114, 115, 101, 108, 102},
			[]byte{54, 89, 75, 110, 71, 66, 52, 87, 51, 45, 66, 79, 114, 60, 49, 68, 102, 84, 90, 41, 43, 67, 93, 85, 61, 64, 86, 39, 55, 107, 66, 45, 59, 74, 60, 70, 96, 77, 80, 55, 67, 104, 60}},
		{"len(src)%4 = 1", []byte{69, 118, 101, 114, 121, 32, 109, 111, 109, 101, 110, 116, 32, 105, 115, 32, 97, 32, 102, 114, 101, 115, 104, 32, 98, 101, 103, 105, 110, 110, 105, 110, 103},
			[]byte{55, 60, 87, 54, 95, 71, 112, 36, 115, 66, 68, 46, 82, 85, 44, 43, 68, 71, 109, 62, 64, 51, 66, 48, 38, 65, 84, 77, 78, 45, 64, 86, 39, 49, 100, 68, 74, 106, 48, 43, 66, 41}},
		{"len(src)%4 = 0", []byte{87, 104, 97, 116, 32, 119, 101, 32, 116, 104, 105, 110, 107, 44, 32, 119, 101, 32, 98, 101, 99, 111, 109, 101},
			[]byte{61, 40, 108, 35, 97, 43, 69, 113, 66, 62, 70, 68, 44, 66, 43, 67, 70, 103, 84, 80, 65, 75, 89, 71, 110, 64, 114, 72, 51, 113}},
	} {
		got := Encode(tc.str)
		if !reflect.DeepEqual(got, tc.want) {
			t.Errorf("ERR: Encode(%s): got = %v, want = %v", tc.name, got, tc.want)
		}
	}
}

func TestDecode(t *testing.T) {
	for _, tc := range []struct {
		name string
		str  []byte
		want []byte
	}{
		{"len(src)%5 = 4", []byte{57, 106, 113, 112, 98, 43, 68, 62, 50, 36, 65, 57, 47, 108, 49, 64, 59, 66, 69, 115, 67, 104, 91, 78, 113, 70, 60, 71, 100, 71, 69, 98, 100, 57},
			[]byte{77, 97, 110, 121, 32, 104, 97, 110, 100, 115, 32, 109, 97, 107, 101, 32, 108, 105, 103, 104, 116, 32, 119, 111, 114, 107, 46}},
		{"len(src)%5 = 3", []byte{54, 89, 75, 110, 71, 66, 52, 87, 51, 45, 66, 79, 114, 60, 49, 68, 102, 84, 90, 41, 43, 67, 93, 85, 61, 64, 86, 39, 55, 107, 66, 45, 59, 74, 60, 70, 96, 77, 80, 55, 67, 104, 60},
			[]byte{67, 104, 97, 110, 103, 101, 32, 116, 104, 101, 32, 119, 111, 114, 108, 100, 32, 98, 121, 32, 98, 101, 105, 110, 103, 32, 121, 111, 117, 114, 115, 101, 108, 102}},
		{"len(src)%5 = 2", []byte{55, 60, 87, 54, 95, 71, 112, 36, 115, 66, 68, 46, 82, 85, 44, 43, 68, 71, 109, 62, 64, 51, 66, 48, 38, 65, 84, 77, 78, 45, 64, 86, 39, 49, 100, 68, 74, 106, 48, 43, 66, 41},
			[]byte{69, 118, 101, 114, 121, 32, 109, 111, 109, 101, 110, 116, 32, 105, 115, 32, 97, 32, 102, 114, 101, 115, 104, 32, 98, 101, 103, 105, 110, 110, 105, 110, 103}},
		{"len(src)%5 = 0", []byte{61, 40, 108, 35, 97, 43, 69, 113, 66, 62, 70, 68, 44, 66, 43, 67, 70, 103, 84, 80, 65, 75, 89, 71, 110, 64, 114, 72, 51, 113},
			[]byte{87, 104, 97, 116, 32, 119, 101, 32, 116, 104, 105, 110, 107, 44, 32, 119, 101, 32, 98, 101, 99, 111, 109, 101}},
	} {
		got := Decode(tc.str)
		if !reflect.DeepEqual(got, tc.want) {
			t.Errorf("ERR: Decode(%s): got = %v, want = %v", tc.name, got, tc.want)
		}
	}
}
